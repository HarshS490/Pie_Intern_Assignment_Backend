// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String  @id @default(cuid()) @db.VarChar(30)
  username  String  @unique
  avatarUrl String?

  video        Video[]       @relation("userToVideos")
  interactions Interaction[]
}

model Video {
  id          String @id @default(cuid()) @db.VarChar(30)
  title       String
  description String
  videoUrl    String

  userId       String
  User         User          @relation("userToVideos", fields: [userId], references: [id])
  metaItem     MetaItem?
  interactions Interaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MetaItem {
  id      String @id @default(cuid()) @db.VarChar(30)
  label   String
  videoId String @unique
  video   Video  @relation(fields: [videoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // because we will usually required to query the metaItem associated to a video only.
  @@index([videoId])
}

enum InteractionType {
  like
  comment
  view
}

model Interaction {
  id      String          @id @default(cuid()) @db.VarChar(30)
  type    InteractionType
  content String?
  videoId String
  video   Video           @relation(fields: [videoId], references: [id])
  userId  String
  user    User            @relation(fields: [userId], references: [id])

  @@unique([userId, videoId, type])
  @@index([videoId])
}
